/*
 * AlphaBot 2 API
 * API for interacting with an AlphaBot 2 RasPi
 *
 * OpenAPI spec version: 1.0.2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {BottomSensors} from '../model/BottomSensors';
import {DistanceMeasurementResult} from '../model/DistanceMeasurementResult';
import {ObstaclesDetectionResult} from '../model/ObstaclesDetectionResult';

/**
* Sensors service.
* @module api/SensorsApi
* @version 1.0.2
*/
export class SensorsApi {

    /**
    * Constructs a new SensorsApi. 
    * @alias module:api/SensorsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getBottomSensors operation.
     * @callback moduleapi/SensorsApi~getBottomSensorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BottomSensors{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reads the values of the bottom infrared sensors then it returns them.
     * @param {module:api/SensorsApi~getBottomSensorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getBottomSensors(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BottomSensors;

      return this.apiClient.callApi(
        '/bottomSensors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getDistance operation.
     * @callback moduleapi/SensorsApi~getDistanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DistanceMeasurementResult{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Does an Ultrasonic distance measurement then it returns the result.
     * @param {module:api/SensorsApi~getDistanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getDistance(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DistanceMeasurementResult;

      return this.apiClient.callApi(
        '/distance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getObstacles operation.
     * @callback moduleapi/SensorsApi~getObstaclesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObstaclesDetectionResult{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks via infrared whether there are obstacles on the left, and right side.
     * @param {module:api/SensorsApi~getObstaclesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getObstacles(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ObstaclesDetectionResult;

      return this.apiClient.callApi(
        '/obstacles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
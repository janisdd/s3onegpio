/*
 * AlphaBot 2 API
 * API for interacting with an AlphaBot 2 RasPi
 *
 * OpenAPI spec version: 1.0.2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {CameraDirection} from '../model/CameraDirection';
import {Direction} from '../model/Direction';

/**
* Move service.
* @module api/MoveApi
* @version 1.0.2
*/
export class MoveApi {

    /**
    * Constructs a new MoveApi. 
    * @alias module:api/MoveApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the move operation.
     * @callback moduleapi/MoveApi~moveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move AlphaBot x in the specified direction.
     * @param {module:model/Direction} direction The direction to move in.
     * @param {Number} speed The speed to execute this operation. 1&#x3D;slowest, 100&#x3D;fastest
     * @param {module:api/MoveApi~moveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    move(direction, speed, callback) {
      
      let postBody = null;
      // verify the required parameter 'direction' is set
      if (direction === undefined || direction === null) {
        throw new Error("Missing the required parameter 'direction' when calling move");
      }
      // verify the required parameter 'speed' is set
      if (speed === undefined || speed === null) {
        throw new Error("Missing the required parameter 'speed' when calling move");
      }

      let pathParams = {
        'direction': direction,'speed': speed
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/move/{direction}/{speed}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the moveCamera operation.
     * @callback moduleapi/MoveApi~moveCameraCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Moves the camera in the range from 0 to 180 degrees.
     * @param {module:model/CameraDirection} cameraDirection The direction to move in.
     * @param {Number} degrees The number of degrees by which the movement should be executed.
     * @param {module:api/MoveApi~moveCameraCallback} callback The callback function, accepting three arguments: error, data, response
     */
    moveCamera(cameraDirection, degrees, callback) {
      
      let postBody = null;
      // verify the required parameter 'cameraDirection' is set
      if (cameraDirection === undefined || cameraDirection === null) {
        throw new Error("Missing the required parameter 'cameraDirection' when calling moveCamera");
      }
      // verify the required parameter 'degrees' is set
      if (degrees === undefined || degrees === null) {
        throw new Error("Missing the required parameter 'degrees' when calling moveCamera");
      }

      let pathParams = {
        'cameraDirection': cameraDirection,'degrees': degrees
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/moveCamera/{cameraDirection}/{degrees}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the moveStop operation.
     * @callback moduleapi/MoveApi~moveStopCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops the AlphaBot.
     * @param {module:api/MoveApi~moveStopCallback} callback The callback function, accepting three arguments: error, data, response
     */
    moveStop(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/move/stop', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}